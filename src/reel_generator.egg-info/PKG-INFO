Metadata-Version: 2.4
Name: reel-generator
Version: 0.1.1
Summary: Chat to short vertical video reel generator
Author: Your Name
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastapi==0.111.0
Requires-Dist: uvicorn[standard]==0.30.1
Requires-Dist: pydantic==2.8.2
Requires-Dist: moviepy==1.0.3
Requires-Dist: gTTS==2.5.1
Requires-Dist: python-dotenv==1.0.1
Requires-Dist: pillow==10.3.0
Requires-Dist: requests==2.32.3
Requires-Dist: numpy==1.26.4
Provides-Extra: dev
Requires-Dist: pytest==8.2.2; extra == "dev"
Dynamic: license-file

# Chat-to-Reel Generator

A Python application that accepts an idea for a short video ("reel") in English via a chat-style API/UI, generates a script, creates AI narration audio, composes background music, assembles a vertical video with dynamic stock/background clips or generated visuals, overlays captions, and outputs a shareable MP4 file.

## Features (Initial Scope)
- FastAPI backend with WebSocket + REST endpoints for interactive chat.
- Idea-to-script generation using pluggable LLM provider (OpenAI, local model, etc.).
- Script segmentation into scenes (beats) with duration estimation.
- Caption + SRT creation.
- Voice narration generation (via TTS provider abstraction; initial: gTTS fallback).
- Simple stock/background video selection (Pexels/Unsplash API placeholder) or generated colored gradient backgrounds if API keys absent.
- Video assembly with moviepy.
- Exports vertical 9:16 MP4 (1080x1920) with burned-in captions.
- Basic test for scene segmentation logic.

## Roadmap (Next Steps)
- Rich prompt engineering + style controls.
- Multiple voice styles & cloning.
- Automatic B-Roll retrieval.
- Optional image generation per scene (Stable Diffusion / DALL·E / local).
- Music bed ducking under narration.
- Frontend (React) single-page UI.
- Docker packaging.

## Quick Start

### 1. Create & activate virtual environment
```bash
python -m venv .venv
source .venv/bin/activate
pip install -U pip
```

### 2. Install dependencies
```bash
pip install -r requirements.txt
```

### 3. Run the dev server
```bash
uvicorn reel_app.main:app --reload
```

Open: http://127.0.0.1:8000/docs

### 4. Basic Usage (REST)
`POST /idea` with JSON:
```json
{"idea": "Explain the basics of quantum computing for beginners"}
```
Response returns `task_id`. Poll:
`GET /result/{task_id}` to retrieve status & (once ready) the video file path.

### 5. WebSocket (Interactive Chat)
Connect to: `ws://127.0.0.1:8000/ws/chat`
Send messages:
```json
{"role": "user", "content": "Idea: How AI helps productivity"}
```
Streamed events will include: script_draft, scenes, narration_progress, video_progress, completed.

### 6. Output
Generated MP4s are stored under `./outputs/`.

## Configuration
Environment variables (optional):
- `OPENAI_API_KEY` – if using OpenAI for script generation.
- `PEXELS_API_KEY` – for stock footage (future enhancement placeholder).

Fallback behavior: If no model API key, a simple heuristic script generator is used.

## Testing
```bash
pytest -q
```

## License
MIT
